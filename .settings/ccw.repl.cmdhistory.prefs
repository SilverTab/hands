cmdhistory=[";; Switching to hands.core namespace" "Card" ";; Switching to hands.core namespace" "make-card" "(make-card)" "(make-card 4)" "(make-card 4 \:diamond)" "(throw \\"what\\")" "(throw Exception .\\"Something wrong\\")" "(throw Exception. \\"Something is wrong\\")" "(throw Throwable. \\"some text\\")" "(throw (Exception. \\"Something wrong\\"))" "(make-card 3 \:fdksjf)" "(make-card 3 \:diamond)" "(make-card 3 \:diamonds)" "(contains? card-suites \:diamonds)" "card-suites" "(contains? card-suites \:clubs)" "(\= \:test \:test)" "(contains? [\\"foo\\" \\"bar\\"] \\"foo\\")" "(contains '(\\"foo\\" \\"bar\\") \\"foo\\")" "(contains? '(\\"foo\\" \\"bar\\") \\"foo\\")" "(some \#{\:test} [\:test \:what])" "(some \#{\:test} [\:no \:dude])" "(make-card 4 \:diamonds)" "(make-card 4 \:dskfjsd)" "(doc make-card)" "(def card (make-card 4 \:diamond))" "(def card1 (make-card 4 \:diamonds))" "(def card2 (make-card 4 \:diamonds))" "(card-equal? card1 card2)" "(card-equal? card1 (make-card))" "(is (thrown-with-msg? \\"Exception Suite does not exist\\" (make-card 5 \:dkjf)))" "(card-in? [(make-card 2 \:clubs)] (make-card 2 \:clubs))" "(card-in? [(make-card 2 \:clubs), (make-card 5 \:clubs)] (make-card 2 \:clubs))" "(card-in? [(make-card 2 \:clubs), (make-card 5 \:clubs)] (make-card 2 \:hearts))" ";; Switching to hands.core namespace" "(for [x (range 0 5)] x)" "(let [v []]\\n  (concat v \\"foo\\"))" "(let [v []]\\n     (concat v 5\\n             ))" "(let [v []]\\n     (conj v 6))" "(make-hand)" "(< 5 0)" "(make-hand)" "kill" "(kill)" ";; Switching to hands.core namespace" "(take 5 (conj [] (make-card)))" "(take 5 (repeatedly (make-card)))" "(take 5 (repeatedly \#{conj [] (make-card)}))" "(take 5 (repeatedly \#(conj [] (make-card))))" "(take 5 (repeatedly (conj [] (make-card))))" "(take 5 (repeatedly \#(make-card)))" "(take 5 (repeatedly \#(rand-int 5)))" "(take 5 (repeatedly \#(rand-int 10)))" "(distict [(make-card) (make-card)])" "(distinct [(make-card) (make-card)])" "(distinct? [(make-card) (make-card)])" "(distinct? [(make-card 4 \:hearts) (make-card 4 \:hearts)])" "(\=[(make-card 4 \:hearts) (make-card 4 \:hearts)])" "(\= [(make-card 3\\n               \:hearts) (make-card 4 \:hearts)])" "(.equals 4 6)" "(.equals 5 5)" "(.equals [(make-card 3 \:hearts) (make-card 4 \:hearts)])" "(testdude)" "(x 3 3)" "(testdude)" ";; Switching to hands.core namespace" "(testdude)" ";; Switching to hands.core namespace" "(testdude)" "(make-card)" ";; Switching to hands.core namespace" "(testdude)" ";; Switching to hands.core namespace" "(testdude)" ";; Switching to hands.core namespace" "(testdude)" "(def factorial\\n  (fn [n]\\n    (loop [cnt n acc 1]\\n       (if (zero? cnt)\\n            acc\\n          (recur (dec cnt) (* acc cnt))))))" "(factorial 100)" "(factorial)" "(user/factorial)" "(testdude)" "(card-print (make-card))" "(card-suites-shortnames)" "card-suites-shortnames" "(card-print (make-card))" "(make-hand)" "(apply card-print (make-hand))" "(map card-print (make-hand))" "(distinct [\\"foo\\" \\"foo\\"])" "(distinct? [\\"foo\\" \\"bar\\" \\"what\\"])" "(distinct? [\\"foo\\" \\"foo\\" \\"fuck\\"])" "(distinct? (seq [\\"foo\\" \\"foo\\" \\"fuck\\"]))" "(apply distinct? [\\"foo\\" \\"foo\\" \\"bar\\"])" "(apply distinct? [\\"foo\\" \\"baz\\" \\"bar\\"])" "(apply distinct? (make-hand))" "{\:foo (fn (println \\"waa\\"))}" "(hash-map \:foo (fn (println \\"waa\\")))" "(ns)" "ns" "(namespace)" "(make-hand)" "(map card-print (make-hand))" "(hash-map \:foo \\"bar\\")" "(hash-map \:foo \#(println \\"foo\\"))" "(def t (hash-map \:foo \#(println \\"foo\\")))" "t" "(apply t)" "(t)" "(get t \:foo)" "(apply (get t \:foo))" "((get t \:foo))" "(deref (get t \:foo))" "((get t \:foo))"]
eclipse.preferences.version=1
